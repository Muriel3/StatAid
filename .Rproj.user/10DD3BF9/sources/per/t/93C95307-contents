#' Explo_paired UI Function
#'
#' @description A shiny Module.
#'
#' @param id,input,output,session Internal parameters for {shiny}.
#'
#' @noRd 
#'
#' @importFrom shiny NS tagList 
mod_Explo_paired_ui <- function(id){
  ns <- NS(id)
  tagList(
    
    fluidRow(
      column(12,
      p("Data format: each row correspond to an observation (sample/patient), each selected variable/column to a different timepoint of the same variable 
        (e.g. Concentration_day0, concentration_day15, concentration_day30...)"),
      ),
      
      tabsetPanel(id = 'paired', type = "tabs",
                         tabPanel("Graph",
                           column(10,
                                  box(title="Boxplot (Median, Interquartile Range)",
                                      plotOutput(ns("Boxplot")), collapsible=T),
                                  box(title="Barplot (Mean, standard-derivation)", 
                                      plotOutput(ns("Barchart")), collapsible=T)
                           ),
                           column(2,
                                  absolutePanel(width = 200, right = 20, draggable = T,
                                                style = "opacity: 0.85",
                                                wellPanel(
                                               selectInput(ns("Variable"), label =("Variable timepoints (numerical)"),
                                                              multiple = T,selected = NULL,
                                                              ""),
                                                  checkboxInput(ns("Include_na"), 
                                                                label="Include NA in groups",value=F),
                                                  selectInput(ns("Legend_ext"), label =("External legend"),
                                                              choices=c("No"= "none",
                                                                        "Top"= "top",
                                                                        "Right"=  "right",
                                                                        "Left"=  "left",
                                                                        "Bottom"=   "bottom"),
                                                              multiple = F,selected = "bottom"),
                                                  selectInput(ns("Legend_x"), label =("X axis legend"),
                                                              choices=c("Hide","Normal","45°"),
                                                              multiple = F,selected = "Normal")
                                                  
                                                )
                                  )#Absolutepanel
                           )),#Column & tabpanel

                  tabPanel("Descriptive table",
                           
                           "test")


    
    
    
  )
  ) # fluid row
  ) #tag list
}
    
#' Explo_paired Server Function
#'
#' @noRd 
mod_Explo_paired_server <- function(input, output, session, r){
  ns <- session$ns
  
  data <- reactive(r$test$data)
  
  ## Parameters
  observe({
    updateSelectInput(
      session,
      "Group",
      choices=c(names(data()[-1][sapply(data()[,-1], class) %in% c("factor","character")])))
  })
  
  
  observe({
    updateSelectInput(
      session,
      "Variable",
      choices=setdiff(c(names(data()[-1][sapply(data()[,-1], class) %in% c("numeric","double","integer")])),input$Group))
  })
  
  
  
  ## DF
  data_explo = reactive({
    
    df <- data() %>%
      pivot_longer(input$Variable,names_to = "Timepoint",values_to = "value")
    
    return(df)
    
  }) 
  
  table_des_df <- reactive({
    
    input$Run_analysis
    req(input$Run_analysis >= 1)
    isolate({
      
      #group=as.character(input$Group)
      
      if(input$Group == "Whole_cohort"){
        data_sort <- data() %>% select(-all_of(c("Patient_id")))
      } else {
        data_sort <- data() %>% select(-all_of(c("Whole_cohort","Patient_id")))
      }
      
      if(input$Variable != "All"){
        data_sort <- select(data_sort, one_of(input$Group), one_of(input$Variable))
      }
      
      df <- descriptive_table(data_sort, group=input$Group, na.include = input$Include_na, padj_method = input$Adjust_pval,
                              percent_type=ifelse(input$Percent_by_row == T,2,1))
      
      return(df)
      
    })
    
    
  })
  
  ## Output 
  
  
  
  legend.x = reactive({
    if(input$Legend_x == "Hide"){
      leg=element_blank()
    }
    if(input$Legend_x == "Normal"){
      leg = element_text(size=12, color="black")
    }
    if(input$Legend_x == "45°"){
      leg = element_text(size=12, color="black", angle=45, vjust=1, hjust=1)
    }
    return(leg)
    
  }) 
  
  
  ## Plots & tables
  
  output$Boxplot <- renderPlot({
    # --- Boxplot & scatterplot
    data_explo() %>%
      ggplot(aes(x=Timepoint, y=value, fill = Timepoint )) +
      geom_boxplot(outlier.shape = NA,size=0.75) +
      geom_point() +
      geom_line(aes(group=factor(Patient_id)), alpha = 0.50) +
      #geom_text_repel(aes(label=label),size=5, colour="red") +
      labs( y= paste0(input$Variable), x = "", fill = "Group") +
      default_theme +
      theme(axis.text.x = legend.x(),
            legend.position = input$Legend_ext)
    
  })
  
  
  
  output$Barchart <- renderPlot({
    
    data_explo() %>%
      ggbarplot(x="Timepoint", y="value", fill = "Timepoint", size=0.75, width=1,
                add = c("mean_sd", "point"), error.plot = "upper_errorbar") +
      geom_line(aes(group=factor(Patient_id)), alpha = 0.50) +
      #geom_text_repel(aes(label=label),size=5, colour="red") +
      labs( y= paste0(input$Variable), x = "", fill = "Group") +
      default_theme +
      theme(axis.text.x = legend.x(),
            legend.position = input$Legend_ext)
    
    
  })
  
  

  
  output$analysis_info <- renderText({
    paste(paste0("<b>Methods :</b> Categorical variables are expressed as n (%) and compared with the Chi-squared test or its non-parametric alternative Fisher's test with simulated p-values. 
    Numerical variables are expressed as mean (standard-derivation) or median [IQR] and compared with else Welch's t-test (or its non-parametric alternative Wilcoxon's rank-sum test) or 
    ANOVA (or its non-parametric alternative Kruskal-Wallis test) where appropriate.
                 Variables with >80% missing are removed from the analysis."),
          if_else(input$Adjust_pval == "none", "P-values are not adjusted.", paste0("P-values are adjusted with the ",as.character(input$Adjust_pval)," method." )))
    
  })
  
  output$Table_des <- DT::renderDT(
    table_des_df(),
    class = "display nowrap compact", # style
    filter = "top", # location of column filters
    server = T,
    rownames = FALSE,
    options = list(lengthChange = TRUE,
                   pageLength = 30,
                   columnDefs = list(list(className = 'dt-left', targets = "_all")))
    
    
  )
  
 
}
    
## To be copied in the UI
# mod_Explo_paired_ui("Explo_paired_ui_1")
    
## To be copied in the server
# callModule(mod_Explo_paired_server, "Explo_paired_ui_1")
 
