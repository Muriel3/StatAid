ggplot(aes(x=Timepoint, y=mean, fill = Timepoint)) +
geom_bar( stat="identity", color = "black", size = 0.75)
if(error_bar != "hide"){
p <- p +
geom_errorbar(aes(x=Timepoint, ymin=mean-error, ymax=mean+error), width=0.4, colour="black", alpha=0.9, size=1.5)
}
if(add_points == T){
p <- p +  geom_point(data=data_plot, aes(x=Timepoint,y=value))
}
if(add_lines == T){
p <- p + geom_line(aes(group=factor(Patient_id)), alpha = 0.50)
}
}
## Add statistics
if(stat != "no"){
var_class <- class(data_plot$Timepoint)
if(nlevels(data_plot$Timepoint) == 2 & var_class %in% c("numeric","double","integer")){
p_value <-  ifelse(stat == "param",
paste0("T-test p-value: ",format.pval(t.test(data[,variables[1]],data[,variables[2]],paired=T )$p.value,3)),
paste0("Wilcoxon test p-value: ", format.pval(wilcox.test(data[,variables[1]],data[,variables[2]],paired=T )$p.value,3)))
}
if(nlevels(data_plot$Timepoint) > 2 & var_class %in% c("numeric","double","integer")){
anova<- aov(value~ Timepoint + Error(Patient_id/Timepoint), data=data_plot)
p_value <-  ifelse(stat == "param",
paste0("ANOVA p-value: ",format.pval( broom::tidy(anova)$p.value[which(is.na(broom::tidy(anova)$p.value) == F)],3)),
paste0("Friedman test p-value: ", format.pval(friedman.test(value ~ Timepoint | Patient_id, data=data_plot)$p.value,3)))
}
if( !var_class %in% c("numeric","double","integer")){
p_value <-  ifelse(stat == "param",
paste0("Chi-squared test p-value: ",format.pval(chisq.test(table(data_plot))$p.value, 3,eps=0.001)),
paste0("Fisher's test p-value: ", format.pval(fisher.test(table(data_plot), simulate.p.value = T)$p.value, 3,eps=0.001)))
}
ylim_inf <- unlist(ggplot_build(p)$layout$panel_params[[1]][("y.range")])[1]
ylim_sup <- unlist(ggplot_build(p)$layout$panel_params[[1]][("y.range")])[2]
y_pos = 0.95*ylim_sup
x_pos =  mean(unlist(ggplot_build(p)$layout$panel_params[[1]][("x.range")]))
# x_pos = ((nlevels(data_plot$Group)+1)/2)
# y_pos = ifelse((plot_type == "Barchart_count" | (plot_type == "Barchart_mean" & add_points == F)),
#   (max(df_y$ymax) + 0.10* max(df_y$ymax)),
#   (max(data.frame(ggplot_build(p)[[1]][[3]])$y) + 0.10* max(data.frame(ggplot_build(p)[[1]][[3]])$y))
# )
p <- p + annotate("text", x=x_pos, y=y_pos, label=p_value,size=6)
}
## final plot with theme layer
res <- list()
res[["graph"]] <- p
res[["lim"]] <- data.frame(xlim = unlist(ggplot_build(p)$layout$panel_params[[1]][("x.range")]),
ylim = unlist(ggplot_build(p)$layout$panel_params[[1]][("y.range")]))
return(res)
}
autoplot_paired(data_aml,timepoints, add_lines=F)
str(data_aml)
timepoints =c("Age", "WBC","PB_BLAST_PERCENTAGE")
data = data_aml
## DF
data_plot <- data %>%
select(Patient_id, all_of(variables)) %>%
na.omit() %>% droplevels() %>%
pivot_longer(variables,names_to = "Timepoint",values_to = "value")
## DF
data_plot <- data %>%
select(Patient_id, all_of(timepoints)) %>%
na.omit() %>% droplevels() %>%
pivot_longer(timepoints,names_to = "Timepoint",values_to = "value")
## DF
data_plot <- data %>%
select(Patient_id, all_of(timepoints)) %>%
na.omit() %>% droplevels() %>%
pivot_longer(all_of(timepoints),names_to = "Timepoint",values_to = "value")
autoplot_paired <- function(data, timepoints,
plot_type="Boxplot", add_points=T, add_lines=T,
error_bar = "IC95",
stat = "param"){
## DF
data_plot <- data %>%
select(Patient_id, all_of(timepoints)) %>%
na.omit() %>% droplevels() %>%
pivot_longer(all_of(timepoints),names_to = "Timepoint",values_to = "value")
### Basic plot
p <- ggplot(data_plot, aes(x=Timepoint, y=value, fill=Timepoint))
## Aesthetics
if(plot_type == "Boxplot"){
if(add_points == T){
p <- p + geom_boxplot(outlier.shape = NA,size=0.75) +  geom_point()
} else {
p <- p + geom_boxplot(outlier.shape = NA,size=0.75)
}
if(add_lines == T){
p <- p + geom_line(aes(group=factor(Patient_id)), alpha = 0.50)
}
}
if(plot_type == "Barchart_mean"){
data_stat <- data_plot %>%
group_by(Timepoint) %>%
summarise(n = n(),
mean = mean(value),
sd = sd(value),
hide = factor(1)) %>%
mutate(se=sd/sqrt(n)) %>%
mutate(IC95=se * qt((1-0.05)/2 + 0.5, n-1))
data_stat$error <- unlist(as.vector(data_stat[,error_bar]))
p <- data_stat %>%
ggplot(aes(x=Timepoint, y=mean, fill = Timepoint)) +
geom_bar( stat="identity", color = "black", size = 0.75)
if(error_bar != "hide"){
p <- p +
geom_errorbar(aes(x=Timepoint, ymin=mean-error, ymax=mean+error), width=0.4, colour="black", alpha=0.9, size=1.5)
}
if(add_points == T){
p <- p +  geom_point(data=data_plot, aes(x=Timepoint,y=value))
}
if(add_lines == T){
p <- p + geom_line(aes(group=factor(Patient_id)), alpha = 0.50)
}
}
## Add statistics
if(stat != "no"){
var_class <- class(data_plot$Timepoint)
if(nlevels(data_plot$Timepoint) == 2 & var_class %in% c("numeric","double","integer")){
p_value <-  ifelse(stat == "param",
paste0("T-test p-value: ",format.pval(t.test(data[,variables[1]],data[,variables[2]],paired=T )$p.value,3)),
paste0("Wilcoxon test p-value: ", format.pval(wilcox.test(data[,variables[1]],data[,variables[2]],paired=T )$p.value,3)))
}
if(nlevels(data_plot$Timepoint) > 2 & var_class %in% c("numeric","double","integer")){
anova<- aov(value~ Timepoint + Error(Patient_id/Timepoint), data=data_plot)
p_value <-  ifelse(stat == "param",
paste0("ANOVA p-value: ",format.pval( broom::tidy(anova)$p.value[which(is.na(broom::tidy(anova)$p.value) == F)],3)),
paste0("Friedman test p-value: ", format.pval(friedman.test(value ~ Timepoint | Patient_id, data=data_plot)$p.value,3)))
}
if( !var_class %in% c("numeric","double","integer")){
p_value <-  ifelse(stat == "param",
paste0("Chi-squared test p-value: ",format.pval(chisq.test(table(data_plot))$p.value, 3,eps=0.001)),
paste0("Fisher's test p-value: ", format.pval(fisher.test(table(data_plot), simulate.p.value = T)$p.value, 3,eps=0.001)))
}
ylim_inf <- unlist(ggplot_build(p)$layout$panel_params[[1]][("y.range")])[1]
ylim_sup <- unlist(ggplot_build(p)$layout$panel_params[[1]][("y.range")])[2]
y_pos = 0.95*ylim_sup
x_pos =  mean(unlist(ggplot_build(p)$layout$panel_params[[1]][("x.range")]))
# x_pos = ((nlevels(data_plot$Group)+1)/2)
# y_pos = ifelse((plot_type == "Barchart_count" | (plot_type == "Barchart_mean" & add_points == F)),
#   (max(df_y$ymax) + 0.10* max(df_y$ymax)),
#   (max(data.frame(ggplot_build(p)[[1]][[3]])$y) + 0.10* max(data.frame(ggplot_build(p)[[1]][[3]])$y))
# )
p <- p + annotate("text", x=x_pos, y=y_pos, label=p_value,size=6)
}
## final plot with theme layer
res <- list()
res[["graph"]] <- p
res[["lim"]] <- data.frame(xlim = unlist(ggplot_build(p)$layout$panel_params[[1]][("x.range")]),
ylim = unlist(ggplot_build(p)$layout$panel_params[[1]][("y.range")]))
return(res)
}
autoplot_paired(data_aml,timepoints, add_lines=F)
## DF
data_plot <- data %>%
select(Patient_id, all_of(timepoints)) %>%
na.omit() %>% droplevels() %>%
pivot_longer(all_of(timepoints),names_to = "Timepoint",values_to = "value")
### Basic plot
p <- ggplot(data_plot, aes(x=Timepoint, y=value, fill=Timepoint))
p
plot_type
plot_type="Boxplot"
if(plot_type == "Boxplot"){
if(add_points == T){
p <- p + geom_boxplot(outlier.shape = NA,size=0.75) +  geom_point()
} else {
p <- p + geom_boxplot(outlier.shape = NA,size=0.75)
}
if(add_lines == T){
p <- p + geom_line(aes(group=factor(Patient_id)), alpha = 0.50)
}
}
add_points = T
if(plot_type == "Boxplot"){
if(add_points == T){
p <- p + geom_boxplot(outlier.shape = NA,size=0.75) +  geom_point()
} else {
p <- p + geom_boxplot(outlier.shape = NA,size=0.75)
}
if(add_lines == T){
p <- p + geom_line(aes(group=factor(Patient_id)), alpha = 0.50)
}
}
add_lines = T
if(plot_type == "Boxplot"){
if(add_points == T){
p <- p + geom_boxplot(outlier.shape = NA,size=0.75) +  geom_point()
} else {
p <- p + geom_boxplot(outlier.shape = NA,size=0.75)
}
if(add_lines == T){
p <- p + geom_line(aes(group=factor(Patient_id)), alpha = 0.50)
}
}
p
stat
nlevels(data_plot$Timepoint)
nlevels(factor(data_plot$Timepoint)) == 2
nlevels(factor(data_plot$Timepoint))
var_class <- class(data_plot$Timepoint)
autoplot_paired <- function(data, timepoints,
plot_type="Boxplot", add_points=T, add_lines=T,
error_bar = "IC95",
stat = "param"){
## DF
data_plot <- data %>%
select(Patient_id, all_of(timepoints)) %>%
na.omit() %>% droplevels() %>%
pivot_longer(all_of(timepoints),names_to = "Timepoint",values_to = "value")
### Basic plot
p <- ggplot(data_plot, aes(x=Timepoint, y=value, fill=Timepoint))
## Aesthetics
if(plot_type == "Boxplot"){
if(add_points == T){
p <- p + geom_boxplot(outlier.shape = NA,size=0.75) +  geom_point()
} else {
p <- p + geom_boxplot(outlier.shape = NA,size=0.75)
}
if(add_lines == T){
p <- p + geom_line(aes(group=factor(Patient_id)), alpha = 0.50)
}
}
if(plot_type == "Barchart_mean"){
data_stat <- data_plot %>%
group_by(Timepoint) %>%
summarise(n = n(),
mean = mean(value),
sd = sd(value),
hide = factor(1)) %>%
mutate(se=sd/sqrt(n)) %>%
mutate(IC95=se * qt((1-0.05)/2 + 0.5, n-1))
data_stat$error <- unlist(as.vector(data_stat[,error_bar]))
p <- data_stat %>%
ggplot(aes(x=Timepoint, y=mean, fill = Timepoint)) +
geom_bar( stat="identity", color = "black", size = 0.75)
if(error_bar != "hide"){
p <- p +
geom_errorbar(aes(x=Timepoint, ymin=mean-error, ymax=mean+error), width=0.4, colour="black", alpha=0.9, size=1.5)
}
if(add_points == T){
p <- p +  geom_point(data=data_plot, aes(x=Timepoint,y=value))
}
if(add_lines == T){
p <- p + geom_line(aes(group=factor(Patient_id)), alpha = 0.50)
}
}
## Add statistics
if(stat != "no"){
#var_class <- class(data_plot$Timepoint)
if(nlevels(factor(data_plot$Timepoint)) == 2){
p_value <-  ifelse(stat == "param",
paste0("T-test p-value: ",format.pval(t.test(data[,variables[1]],data[,variables[2]],paired=T )$p.value,3)),
paste0("Wilcoxon test p-value: ", format.pval(wilcox.test(data[,variables[1]],data[,variables[2]],paired=T )$p.value,3)))
}
if(nlevels(factor(data_plot$Timepoint)) > 2){
anova<- aov(value~ Timepoint + Error(Patient_id/Timepoint), data=data_plot)
p_value <-  ifelse(stat == "param",
paste0("ANOVA p-value: ",format.pval( broom::tidy(anova)$p.value[which(is.na(broom::tidy(anova)$p.value) == F)],3)),
paste0("Friedman test p-value: ", format.pval(friedman.test(value ~ Timepoint | Patient_id, data=data_plot)$p.value,3)))
}
ylim_inf <- unlist(ggplot_build(p)$layout$panel_params[[1]][("y.range")])[1]
ylim_sup <- unlist(ggplot_build(p)$layout$panel_params[[1]][("y.range")])[2]
y_pos = 0.95*ylim_sup
x_pos =  mean(unlist(ggplot_build(p)$layout$panel_params[[1]][("x.range")]))
# x_pos = ((nlevels(data_plot$Group)+1)/2)
# y_pos = ifelse((plot_type == "Barchart_count" | (plot_type == "Barchart_mean" & add_points == F)),
#   (max(df_y$ymax) + 0.10* max(df_y$ymax)),
#   (max(data.frame(ggplot_build(p)[[1]][[3]])$y) + 0.10* max(data.frame(ggplot_build(p)[[1]][[3]])$y))
# )
p <- p + annotate("text", x=x_pos, y=y_pos, label=p_value,size=6)
}
## final plot with theme layer
res <- list()
res[["graph"]] <- p
res[["lim"]] <- data.frame(xlim = unlist(ggplot_build(p)$layout$panel_params[[1]][("x.range")]),
ylim = unlist(ggplot_build(p)$layout$panel_params[[1]][("y.range")]))
return(res)
}
autoplot_paired(data_aml,timepoints,plot_type="Boxplot",add_points=T, add_lines=T)
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
autoplot_paired(data_aml,timepoints,plot_type="Barchar_mean",add_points=T, add_lines=T)
autoplot_paired(data_aml,timepoints,plot_type="Barchart_mean",add_points=T, add_lines=T)
data_plot %>%
group_by(Timepoint) %>%
summarise(n = n(),
mean = mean(value),
sd = sd(value),
hide = factor(1)) %>%
mutate(se=sd/sqrt(n)) %>%
mutate(IC95=se * qt((1-0.05)/2 + 0.5, n-1))
data_stat <- data_plot %>%
group_by(Timepoint) %>%
summarise(n = n(),
mean = mean(value),
sd = sd(value),
hide = factor(1)) %>%
mutate(se=sd/sqrt(n)) %>%
mutate(IC95=se * qt((1-0.05)/2 + 0.5, n-1))
data_stat$error <- unlist(as.vector(data_stat[,error_bar]))
p <- data_stat %>%
ggplot(aes(x=Timepoint, y=mean, fill = Timepoint)) +
geom_bar( stat="identity", color = "black", size = 0.75)
p
error_bar
p +
geom_errorbar(aes(x=Timepoint, ymin=mean-error, ymax=mean+error), width=0.4, colour="black", alpha=0.9, size=1.5)
p <- p +
geom_errorbar(aes(x=Timepoint, ymin=mean-error, ymax=mean+error), width=0.4, colour="black", alpha=0.9, size=1.5)
p <- p +  geom_point(data=data_plot, aes(x=Timepoint,y=value))
p <- p + geom_line(aes(group=factor(Patient_id)), alpha = 0.50)
p
p <- data_stat %>%
ggplot(aes(x=Timepoint, y=mean, fill = Timepoint)) +
geom_bar( stat="identity", color = "black", size = 0.75)
p <- p +
geom_errorbar(aes(x=Timepoint, ymin=mean-error, ymax=mean+error), width=0.4, colour="black", alpha=0.9, size=1.5)
p <- p +  geom_point(data=data_plot, aes(x=Timepoint,y=value))
p
p + geom_line(data=data,aes(group=factor(Patient_id)), alpha = 0.50)
p
head(data_stat)
p + geom_line(data=data_plot,aes(group=factor(Patient_id)), alpha = 0.50)
data_plot
p
p + geom_line(data=data_plot,aes(group=factor(Patient_id)), alpha = 0.50)
p + geom_line(data=data_plot, aes(group=factor(Patient_id),y=value), alpha = 0.50)
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
if(plot_type == "Barchart_mean"){
data_stat <- data_plot %>%
group_by(Timepoint) %>%
summarise(n = n(),
mean = mean(value),
sd = sd(value),
hide = factor(1)) %>%
mutate(se=sd/sqrt(n)) %>%
mutate(IC95=se * qt((1-0.05)/2 + 0.5, n-1))
data_stat$error <- unlist(as.vector(data_stat[,error_bar]))
p <- data_stat %>%
ggplot(aes(x=Timepoint, y=mean, fill = Timepoint)) +
geom_bar( stat="identity", color = "black", size = 0.75)
if(error_bar != "hide"){
p <- p +
geom_errorbar(aes(x=Timepoint, ymin=mean-error, ymax=mean+error), width=0.4, colour="black", alpha=0.9, size=1.5)
}
if(add_points == T){
p <- p +  geom_point(data=data_plot, aes(x=Timepoint,y=value))
}
if(add_lines == T){
p <- p + geom_line(data=data_plot, aes(group=factor(Patient_id),y=value), alpha = alpha_line)
}
}
p
stat
anova<- aov(value~ Timepoint + Error(Patient_id/Timepoint), data=data_plot)
p_value <-  ifelse(stat == "param",
paste0("ANOVA p-value: ",format.pval( broom::tidy(anova)$p.value[which(is.na(broom::tidy(anova)$p.value) == F)],3)),
paste0("Friedman test p-value: ", format.pval(friedman.test(value ~ Timepoint | Patient_id, data=data_plot)$p.value,3)))
ylim_inf <- unlist(ggplot_build(p)$layout$panel_params[[1]][("y.range")])[1]
ylim_sup <- unlist(ggplot_build(p)$layout$panel_params[[1]][("y.range")])[2]
y_pos = 0.95*ylim_sup
x_pos =  mean(unlist(ggplot_build(p)$layout$panel_params[[1]][("x.range")]))
p <- p + annotate("text", x=x_pos, y=y_pos, label=p_value,size=6)
res <- list()
res[["graph"]] <- p
res[["lim"]] <- data.frame(xlim = unlist(ggplot_build(p)$layout$panel_params[[1]][("x.range")]),
ylim = unlist(ggplot_build(p)$layout$panel_params[[1]][("y.range")]))
autoplot_paired(data_aml,timepoints,plot_type="Barchart_mean",add_points=T, add_lines=T)
autoplot_paired <- function(data, timepoints,
plot_type="Boxplot", add_points=T, add_lines=T,
error_bar = "IC95",
stat = "param",
alpha_line=0.5){
## DF
data_plot <- data %>%
select(Patient_id, all_of(timepoints)) %>%
na.omit() %>% droplevels() %>%
pivot_longer(all_of(timepoints),names_to = "Timepoint",values_to = "value")
### Basic plot
p <- ggplot(data_plot, aes(x=Timepoint, y=value, fill=Timepoint))
## Aesthetics
if(plot_type == "Boxplot"){
if(add_points == T){
p <- p + geom_boxplot(outlier.shape = NA,size=0.75) +  geom_point()
} else {
p <- p + geom_boxplot(outlier.shape = NA,size=0.75)
}
if(add_lines == T){
p <- p + geom_line(aes(group=factor(Patient_id)), alpha = 0.50)
}
}
if(plot_type == "Barchart_mean"){
data_stat <- data_plot %>%
group_by(Timepoint) %>%
summarise(n = n(),
mean = mean(value),
sd = sd(value),
hide = factor(1)) %>%
mutate(se=sd/sqrt(n)) %>%
mutate(IC95=se * qt((1-0.05)/2 + 0.5, n-1))
data_stat$error <- unlist(as.vector(data_stat[,error_bar]))
p <- data_stat %>%
ggplot(aes(x=Timepoint, y=mean, fill = Timepoint)) +
geom_bar( stat="identity", color = "black", size = 0.75)
if(error_bar != "hide"){
p <- p +
geom_errorbar(aes(x=Timepoint, ymin=mean-error, ymax=mean+error), width=0.4, colour="black", alpha=0.9, size=1.5)
}
if(add_points == T){
p <- p +  geom_point(data=data_plot, aes(x=Timepoint,y=value))
}
if(add_lines == T){
p <- p + geom_line(data=data_plot, aes(group=factor(Patient_id),y=value), alpha = alpha_line)
}
}
## Add statistics
if(stat != "no"){
#var_class <- class(data_plot$Timepoint)
if(nlevels(factor(data_plot$Timepoint)) == 2){
p_value <-  ifelse(stat == "param",
paste0("T-test p-value: ",format.pval(t.test(data[,variables[1]],data[,variables[2]],paired=T )$p.value,3)),
paste0("Wilcoxon test p-value: ", format.pval(wilcox.test(data[,variables[1]],data[,variables[2]],paired=T )$p.value,3)))
}
if(nlevels(factor(data_plot$Timepoint)) > 2){
anova<- aov(value~ Timepoint + Error(Patient_id/Timepoint), data=data_plot)
p_value <-  ifelse(stat == "param",
paste0("ANOVA p-value: ",format.pval( broom::tidy(anova)$p.value[which(is.na(broom::tidy(anova)$p.value) == F)],3)),
paste0("Friedman test p-value: ", format.pval(friedman.test(value ~ Timepoint | Patient_id, data=data_plot)$p.value,3)))
}
ylim_inf <- unlist(ggplot_build(p)$layout$panel_params[[1]][("y.range")])[1]
ylim_sup <- unlist(ggplot_build(p)$layout$panel_params[[1]][("y.range")])[2]
y_pos = 0.95*ylim_sup
x_pos =  mean(unlist(ggplot_build(p)$layout$panel_params[[1]][("x.range")]))
# x_pos = ((nlevels(data_plot$Group)+1)/2)
# y_pos = ifelse((plot_type == "Barchart_count" | (plot_type == "Barchart_mean" & add_points == F)),
#   (max(df_y$ymax) + 0.10* max(df_y$ymax)),
#   (max(data.frame(ggplot_build(p)[[1]][[3]])$y) + 0.10* max(data.frame(ggplot_build(p)[[1]][[3]])$y))
# )
p <- p + annotate("text", x=x_pos, y=y_pos, label=p_value,size=6)
}
## final plot with theme layer
res <- list()
res[["graph"]] <- p
res[["lim"]] <- data.frame(xlim = unlist(ggplot_build(p)$layout$panel_params[[1]][("x.range")]),
ylim = unlist(ggplot_build(p)$layout$panel_params[[1]][("y.range")]))
return(res)
}
autoplot_paired(data_aml,timepoints,plot_type="Barchart_mean",add_points=T, add_lines=T)
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
data_aml <- read.delim("datasets/TCGA_AML_exemple.txt", dec=",", na.strings=c("","NA"),stringsAsFactors=T )
timepoints =c("Age", "WBC","PB_BLAST_PERCENTAGE")
autoplot_paired(data_aml,timepoints,plot_type="Barchart_mean",add_points=T, add_lines=T)
