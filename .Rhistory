rownames_to_column("Type") %>%
transmute(
Type = Type,
"Whole cohort" = paste0(table, " (", table_freq$frequencies, ")")
)
merged_results[1, "Variable"] <- v
merged_results <- select(merged_results, "Variable", everything())
}
list_cat[[v]] <- merged_results
}
########## ========== Final df
final_df <- bind_rows(list_num, list_cat)
} else {
## Filter out var with >80% NA
na_var <- colnames(data)[colSums(is.na(data)) >= 0.8 * nrow(data)]
if (length(na_var) > 0) {
message(paste0(length(na_var), " variables with >80% missing values were removed from the analysis "))
}
var_num <- colnames(data[sapply(data, class) %in% c("numeric", "integer", "double")])
var_num <- var_num[!var_num %in% c(exclude_vector, na_var)]
var_cat <- colnames(data[sapply(data, class) %in% c("factor", "character")])
var_cat <- var_cat[!var_cat %in% c(exclude_vector, group, na_var)]
########## ========== Variables numériques
list_num <- list()
for (v in var_num) {
##### ===== DF
{
df <- data[, c(group, v)]
colnames(df) <- c("group", "variable")
df$group <- factor(df$group)
if (na.include == T) {
df <- df %>% mutate_if(is.factor,
fct_explicit_na,
na_level = "NA"
)
} else {
df <- df %>% filter(is.na(group) == F)
}
}
##### ===== Mean (sd) and Median (IQR)
temp <- df %>%
group_by(group) %>%
summarise(
"Mean (sd)" = paste0(round(mean(variable, na.rm = T), 2), " (", round(sd(variable, na.rm = T), 2), ")"),
"Median [IQR]" = paste0(
median(variable, na.rm = T), " [", round(median(variable, na.rm = T) - IQR(variable, na.rm = T), 2), "-",
round(median(variable, na.rm = T) + IQR(variable, na.rm = T), 2), "]"
)
) %>%
column_to_rownames("group")
##### ===== Statistics
{
if (nlevels(df$group) == 2) {
param <- t.test(df$variable ~ df$group, paired = F)
non_param <- wilcox.test(df$variable ~ df$group, paired = F)
} else {
param <- anova(lm(df$variable ~ df$group))
non_param <- kruskal.test(df$variable, df$group)
}
}
##### ===== Mise en forme résultats
{
merged_results <- data.frame(t(temp), check.names = F) %>%
rownames_to_column("Type")
## Ajout ligne NA
if (na.include == T) {
N_NA <- df %>%
group_by(group) %>%
summarise("NA n (%)" = paste0(sum(is.na(variable)), " (", round(sum(is.na(variable)) * 100 / n(), 2), ")")) %>%
column_to_rownames("group") %>%
t() %>%
data.frame(check.names = F) %>%
rownames_to_column("Type")
merged_results <- rbind(merged_results, N_NA)
}
merged_results[1, "Variable"] <- v
merged_results[1, "param_pvalue"] <- ifelse(nlevels(df$group) > 2, param$`Pr(>F)`[1], param$p.value)
merged_results[1, "param_method"] <- ifelse(nlevels(df$group) > 2, "ANOVA", param$method)
merged_results[1, "non_param_pvalue"] <- non_param$p.value
merged_results[1, "non_param_method"] <- non_param$method
merged_results <- select(merged_results, "Variable", everything())
}
list_num[[v]] <- merged_results
}
########## ========== Variables cat
list_cat <- list()
for (v in var_cat) {
##### ===== DF
{
df <- data[, c(group, v)]
colnames(df) <- c("group", "variable")
df$group <- factor(df$group)
if (na.include == T) {
df <- df %>% mutate_if(is.factor,
fct_explicit_na,
na_level = "NA"
)
} else {
df <- df %>% filter(is.na(group) == F)
}
}
##### ===== Contingency tables
table <- table(df)
frequencies <- round((prop.table(table, percent_type) * 100), 2) ## Col percentage
group_levels <- levels(df$group)
table_freq <- data.frame(cbind(table, frequencies))
mylist <- list()
for (nm in group_levels) {
temp <- data.frame(cbind(table[nm, ], frequencies[nm, ]))
temp[, 2] <- gsub("^", " (", temp[, 2])
temp[, 2] <- gsub("$", ") ", temp[, 2])
temp <- temp %>%
unite(nm, X1, X2, sep = "")
colnames(temp)[1] <- paste0(nm)
mylist[[nm]] <- temp
}
table_freq <- bind_cols(mylist)
rownames(table_freq) <- rownames(mylist[[1]])
##### ===== Statistics
{
param <- chisq.test(table)
non_param <- fisher.test(table, simulate.p.value = T)
}
##### ===== Mise en forme résultats
{
merged_results <- table_freq %>%
rownames_to_column("Type")
merged_results[1, "Variable"] <- v
merged_results[1, "param_pvalue"] <- param$p.value
merged_results[1, "param_method"] <- param$method
merged_results[1, "non_param_pvalue"] <- non_param$p.value
merged_results[1, "non_param_method"] <- gsub("for Count Data ", "", non_param$method)
merged_results[1, "non_param_method"] <- gsub("\\n.*$", "", merged_results[1, "non_param_method"])
merged_results <- select(merged_results, "Variable", everything())
}
list_cat[[v]] <- merged_results
}
########## ========== Final df
final_df <- bind_rows(list_num, list_cat)
}
final_df$Variable[is.na(final_df$Variable)] <- ""
if (group != "Whole_cohort") {
final_df$param_pvalue_adj <- final_df$param_pvalue
final_df$param_pvalue_adj[which(is.na(final_df$param_pvalue_adj) == F)] <- p.adjust(final_df$param_pvalue_adj[which(is.na(final_df$param_pvalue_adj) == F)], method = padj_method)
final_df$non_param_pvalue_adj <- final_df$non_param_pvalue
final_df$non_param_pvalue_adj[which(is.na(final_df$non_param_pvalue) == F)] <- p.adjust(final_df$non_param_pvalue[which(is.na(final_df$non_param_pvalue) == F)], method = padj_method)
pval_cols <- c("param_pvalue", "param_pvalue_adj", "non_param_pvalue", "non_param_pvalue_adj")
na_to_remove_cols <- c(pval_cols, "param_method", "non_param_method")
final_df[, pval_cols] <- apply(final_df[, pval_cols], 2, function(x) {
format.pval(x, 2)
})
final_df[, na_to_remove_cols][final_df[, na_to_remove_cols] == "NA"] <- ""
if (padj_method == "none") {
final_df <- final_df %>% select(-all_of("param_pvalue_adj"), -all_of("non_param_pvalue_adj"))
} else {
final_df <- final_df %>% select(-all_of("param_pvalue"), -all_of("non_param_pvalue"))
}
if (show_methods == F) {
final_df <- final_df %>% select(-all_of("param_method"), -all_of("non_param_method"))
}
}
return(final_df)
}
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
StatAid::run_app()
R.Version()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## Tests ----
## Add one line by test you want to create
usethis::use_test("functions")
## Tests ----
## Add one line by test you want to create
usethis::use_test("functions")
context("Functions test")
data <- read.delim("datasets/TCGA_AML_exemple.txt", dec = ",", na.strings = c("", "NA"), stringsAsFactors = T)
res <- descriptive_table(
data
)
res <- descriptive_table(
data, group = "Sex"
)
res
View(res)
expect_that(res, is.data.frame())
expect_s3_class(res, "data.frame")
class(res)
res$param_pvalue
res$Variable
str(res)
res$param_pvalue[1]
devtools::test()
devtools::test()
devtools::test()
data$v
res <- autoplot(
data,variable="Age", group = "Sex" variable
)
res <- autoplot(
data,variable="Age", group = "Sex"
)
class(res)
class(res$graph)
expect_s3_class(res$graph, c("gg","ggplot"))
class(res$graph)res$lim
res <- regression_dataframes(
y_var="Age", x_var = "WBC", model="lm"
)
res <- regression_dataframes(
y_var="Age", x_var = "WBC", data, model="lm"
)
class(res)
res$tidy_df
res$tidy_df$term[2]
res$augment_df
res$augment_df$Age[1]
res <- regression_dataframes(
y_var="Age", x_var = "WBC", data, model="gam"
)
expect_s3_class(res, "list")
res
class(res)
expect_class(res, "list")
expect_s4_class(res, "list")
expect_s3_class(res, "list")
expect_s3_class(res, "list")
res <- regression_dataframes(
y_var="Age", x_var = "WBC", data, model="lm"
)
expect_s3_class(res, "list")
res <- autoplot(
data,variable="Age", group = "Sex"
)
expect_s3_class(res, "list")
res <- descriptive_table(
data, group = "Sex"
)
expect_s3_class(res, "data.frame")
expect_cres
res
class(res)
res <- autoplot(
data,variable="Age", group = "Sex"
)
class(res)
expect_s3_class(res, "list")
expect_s3_class(res$graph, c("gg","ggplot"))
res <- regression_dataframes(
y_var="Age", x_var = "WBC", data, model="lm"
)
expect_s3_class(res$tidy_df, "data.frame")
expect_s3_class(res$augùent_df, "data.frame")
expect_s3_class(res$augment_df, "data.frame")
expect_equal(res$tidy_df$term[2],"WBC")
expect_equal(res$augment_df$Age[1],76)
res <- regression_dataframes(
y_var="Age", x_var = "WBC", data, model="gam"
)
expect_s3_class(res$tidy_df, "data.frame")
expect_s3_class(res$augment_df, "data.frame")
res$tidy_df$term[2]
res$tidy_df
expect_equal(res$tidy_df$term[1],"s(WBC)")
res$augment_df$Age
expect_equal(res$augment_df$Age[1],76)
res <- regression_table(
data, y_var = "Age" model="gaussian"
)
res <- regression_table(
data, y_var = "Age", family="gaussian"
)
res
res$`X Variables`
expect_equal(res$`X Variables`[1],"Sex")
expect_equal(res$`X Variables`[1],"Sex")
expect_s3_class(res, "data.frame")
res$`Beta Coeff.`[1]
res <- regression_table(
data, y_var = "Sex", family="binomial"
)
colnames(data)
res <- regression_table(
data[,2:7], y_var = "Sex", family="binomial"
)
expect_s3_class(res, "data.frame")
res$`X Variables`
res <- regression_table(
data[,2:7], y_var = "Age", family="gaussian"
)
expect_s3_class(res, "data.frame")
res$`X Variables`[1]
expect_equal(res$`Beta Coeff.`[1],3.35)
expect_s3_class(res, "data.frame")
res$`X Variables`[1]
res
res <- regression_table(
data[,2:7], y_var = "Sex", family="binomial"
)
res
expect_equal(res$`Odds Ratio`[1],1.01)
res <- regression_dataframes(
data, y_var="DFS_STATUS", time_var="DFS_MONTHS"
)
res <- regression_table_cox(
data, y_var="DFS_STATUS", time_var="DFS_MONTHS"
)
res
expect_s3_class(res, "data.frame")
expect_equal(res$`X Variables`[1],"Sex")
expect_equal(res$HR[1],0.91)
res <- regression_table_multi(
data[,2:7], y_var = "Age", family="gaussian"
)
expect_s3_class(res, "data.frame")
res
res <- regression_table_multi(
data[,2:7], y_var = "Sex", family="binomial"
)
expect_s3_class(res, "data.frame")
res
res <- regression_table_multi(
data[,2:7], y_var = "Age", family="gaussian"
)
expect_s3_class(res, "data.frame")
expect_equal(res$`X Variables`[1],"Sex")
res$`Beta Coeff.`
colnames(data)
res <- regression_table_multi_cox(
data[,c(2:5,13:14)], y_var="DFS_STATUS", time_var="DFS_MONTHS"
)
expect_s3_class(res, "data.frame")
res
devtools::test()
devtools::test()
data <- read.delim("../../datasets/TCGA_AML_exemple.txt", dec = ",", na.strings = c("", "NA"), stringsAsFactors = T)
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
