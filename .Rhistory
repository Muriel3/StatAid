"P.Value" = p.value) %>%
mutate(multiv_graph = paste0(`X Variables`,"_",Comparison))
View(res)
res <- bind_rows(res_temp, .id = "x_var") %>% filter(term != "(Intercept)") %>%
select("X Variables" = x_var, "Comparison" = term,
"Beta Coeff." = estimate, "CI95_low" = conf.low, "CI95_high" = conf.high,
"P.Value" = p.value) %>%
mutate(multiv_graph = paste0(`X Variables`,"_",Comparison),
HR = exp(`Beta Coeff.`))
View(res)
exp(-0.38)
exp(0?41)
exp(0.41)
View(res)
1.313708e-02
?tidy
1.01 - 2*0.20403
0.01314 - 2*0.20403
0.01313708 - 2*0.20403
0.01313708 - 1.96*0.20403
res <- bind_rows(res_temp, .id = "x_var") %>% filter(term != "(Intercept)") %>%
select("X Variables" = x_var, "Comparison" = term,
"HR" = estimate, "CI95_low" = conf.low, "CI95_high" = conf.high,
"P.Value" = p.value) %>%
mutate(multiv_graph = paste0(`X Variables`,"_",Comparison),
HR = exp(HR), CI95_low = exp(CI95_low), CI95_high = exp(CI95_high))
View(res)
res$Adj_P.Value = p.adjust(res$P.Value, method="fdr")
res$HR <- round(res$HR,2)
res$CI95_low <- round(res$CI95_low,2)
res$CI95_high <- round(res$CI95_high,2)
- format.pval(res$P.Value, 3)
format.pval(res$P.Value, 3)
format.pval(res$P.Value, 3,eps=0.001)
res$P.Value <- format.pval(res$P.Value, 3)
res$Adj_P.Value <- format.pval(res$Adj_P.Value, 3)
View(res)
res <- bind_rows(res_temp, .id = "x_var") %>% filter(term != "(Intercept)") %>%
select("X Variables" = x_var, "Comparison" = term,
"HR" = estimate, "CI95_low" = conf.low, "CI95_high" = conf.high,
"P.Value" = p.value) %>%
mutate(multiv_graph = paste0(`X Variables`,"_",Comparison),
HR = exp(HR), CI95_low = exp(CI95_low), CI95_high = exp(CI95_high))
res$Adj_P.Value = p.adjust(res$P.Value, method="fdr")
res$HR <- round(res$HR,2)
res$CI95_low <- round(res$CI95_low,2)
res$CI95_high <- round(res$CI95_high,2)
res$P.Value <- format.pval(res$P.Value, 2)
res$Adj_P.Value <- format.pval(res$Adj_P.Value, 2)
res <- bind_rows(res_temp, .id = "x_var") %>% filter(term != "(Intercept)") %>%
select("X Variables" = x_var, "Comparison" = term,
"HR" = estimate, "CI95_low" = conf.low, "CI95_high" = conf.high,
"P.Value" = p.value) %>%
mutate(multiv_graph = paste0(`X Variables`,"_",Comparison),
HR = exp(HR), CI95_low = exp(CI95_low), CI95_high = exp(CI95_high))
res$Adj_P.Value = p.adjust(res$P.Value, method="fdr")
res$HR <- round(res$HR,2)
res$CI95_low <- round(res$CI95_low,2)
res$CI95_high <- round(res$CI95_high,2)
res$P.Value <- format.pval(res$P.Value, 1)
res$Adj_P.Value <- format.pval(res$Adj_P.Value, 1)
res <- bind_rows(res_temp, .id = "x_var") %>% filter(term != "(Intercept)") %>%
select("X Variables" = x_var, "Comparison" = term,
"HR" = estimate, "CI95_low" = conf.low, "CI95_high" = conf.high,
"P.Value" = p.value) %>%
mutate(multiv_graph = paste0(`X Variables`,"_",Comparison),
HR = exp(HR), CI95_low = exp(CI95_low), CI95_high = exp(CI95_high))
res$Adj_P.Value = p.adjust(res$P.Value, method="fdr")
res$HR <- round(res$HR,2)
res$CI95_low <- round(res$CI95_low,2)
res$CI95_high <- round(res$CI95_high,2)
res$P.Value <- format.pval(res$P.Value, 2)
res$Adj_P.Value <- format.pval(res$Adj_P.Value, 2)
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::add_module( name = "Model_surv_multi")
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
data_reg <- data %>% select(all_of(y_var), everything(), -one_of(exclude_vector))
res_list <- list()
x_var = colnames(data_reg)[which(colnames(data_reg) != y_var)]
formula = as.formula(paste0("Surv(time_var,y_var) ~ ."))
fit <- coxph(ormula, data_reg)
fit <- coxph(formula, data_reg)
data_reg
colnames(data_reg)
data_reg <- data %>% select(all_of(y_var), all_of(time_var),everything(), -one_of(exclude_vector))
res_list <- list()
formula = as.formula(paste0("Surv(time_var,y_var) ~ ."))
x_var = colnames(data_reg)[which(colnames(data_reg) != y_var)]
fit <- coxph(formula, data_reg)
head(data_reg)
str(data_reg)
data_reg <- data %>% select(y_var=all_of(y_var), time_var=all_of(time_var),everything(), -one_of(exclude_vector))
x_var = colnames(data_reg)[which(colnames(data_reg) != y_var)]
fit <- coxph(Surv(time_var,y_var) ~ ., data_reg)
fit
res <- broom::tidy(fit,conf.int = TRUE) %>% filter(term != "(Intercept)") %>%
mutate(x_var = "", Comparison = "")
View(res)
x_var = colnames(data_reg)
x_var = colnames(data_reg)[-c(1:2)]
x_var
res
for(var in x_var){
res$x_var[grep(var, res$term)] <- var
}
for(cat_var in names(fit$xlevels)){
res$Comparison[grep(cat_var, res$term)] <- gsub(cat_var,"",paste0(res$term[grep(cat_var, res$term)],"_vs_",fit$xlevels[[cat_var]][1]))
}
for(num_var in x_var[which(!x_var %in% names(fit$xlevels))]){
res$Comparison[grep(num_var, res$term)] <- "Continuous"
}
View(res)
res <- res %>% filter(term != "(Intercept)") %>%
select("X Variables" = x_var, Comparison,
"HR" = estimate, "CI95_low" = conf.low, "CI95_high" = conf.high,
"P.Value" = p.value) %>%
mutate(multiv_graph = paste0(`X Variables`,"_",Comparison),
HR = exp(HR), CI95_low = exp(CI95_low), CI95_high = exp(CI95_high))
res$Adj_P.Value = p.adjust(res$P.Value, method="fdr")
res$HR <- round(res$HR,2)
res$CI95_low <- round(res$CI95_low,2)
res$CI95_high <- round(res$CI95_high,2)
res$P.Value <- format.pval(res$P.Value, 2)
res$Adj_P.Value <- format.pval(res$Adj_P.Value, 2)
View(res)
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## Run checks ----
## Check the package before sending to prod
devtools::check()
## Run checks ----
## Check the package before sending to prod
devtools::check()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## Run checks ----
## Check the package before sending to prod
devtools::check()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
install.packages("formatR", repos = "http://cran.rstudio.com")
library(formatR)
tidy_source(width.cutoff = 80)
tidy_source(width.cutoff = 80)
formatR::tidy_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
install.packages("styler")
library("styler")
styler:::set_style_transformers()
styler:::style_active_file()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library("styler")
install.packages("styler")
install.packages("styler")
library(styler)
styler:::style_active_file()
styler:::style_active_file()
style_dir("")
style_dir()
styler:::style_active_file()
# Set options here
options(golem.app.prod = T) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
